[{"C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\index.js":"1","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\App.js":"2","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\blockchain.js":"3","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\config.js":"4","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\block.js":"5","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\transaction.js":"6","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\ConductTransactions.js":"7","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\history.js":"8","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\transaction_pool.js":"9"},{"size":789,"mtime":1611262867118,"results":"10","hashOfConfig":"11"},{"size":1319,"mtime":1611338794447,"results":"12","hashOfConfig":"11"},{"size":1950,"mtime":1611338464761,"results":"13","hashOfConfig":"11"},{"size":297,"mtime":1611317723092,"results":"14","hashOfConfig":"11"},{"size":1605,"mtime":1611262512371,"results":"15","hashOfConfig":"11"},{"size":673,"mtime":1611249580366,"results":"16","hashOfConfig":"11"},{"size":2283,"mtime":1611338825645,"results":"17","hashOfConfig":"11"},{"size":89,"mtime":1611257083624,"results":"18","hashOfConfig":"11"},{"size":1550,"mtime":1611338740728,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"tj74eh",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\index.js",[],["43","44"],"C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\App.js",[],"C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\blockchain.js",[],"C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\config.js",[],"C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\block.js",["45","46"],"import React, {useState, useEffect} from 'react'\r\nimport {Button} from 'react-bootstrap'\r\nimport {MILLISECONDS_PY} from '../config'\r\nimport Transaction from './transaction'\r\n\r\nfunction ToggleTransactionDisplay({ block }){\r\n    const [displayTransaction, setDisplayTransaction] = useState(false);\r\n    const {data} = block\r\n\r\n    const toggleDisplayTransaction = () => {\r\n        setDisplayTransaction(!displayTransaction);\r\n    }\r\n\r\n\r\n    if (displayTransaction){\r\n        return (\r\n            <div>{\r\n                data.map(transansaction => (\r\n                    <div>\r\n                        <hr/>\r\n                        <Transaction transaction={transansaction} />\r\n                    </div>\r\n                ))\r\n            }\r\n            <br/>\r\n            <Button onClick={toggleDisplayTransaction}>Show less</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <br />\r\n            <Button className=\"cstm-button\" onClick={toggleDisplayTransaction}>Show more</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Block({ block }){\r\n    const {timestamp, hash, data, last_hash} = block;\r\n    const hashDisplay = hash;\r\n    const timestampDisplay = new Date(timestamp / MILLISECONDS_PY).toLocaleString();\r\n    const lasthash = last_hash;\r\n\r\n    return(\r\n        <div className=\"Block\">\r\n            <div>Previous Hash : {lasthash}</div>\r\n            <div>Hash : {hashDisplay}</div>\r\n            <div>TimeStamp : {timestampDisplay}</div>\r\n            <br/>\r\n            <ToggleTransactionDisplay block={block}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Block;","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\transaction.js",["47","48","49"],"import React, {useEffect, useState} from 'react'\r\n\r\nfunction Transaction({transaction}){\r\n    const {input, output} = transaction;\r\n    const recipient = Object.keys(output);\r\n\r\n    if(input.address == \"official-mining-reward\"){\r\n        input.address = `üéñÔ∏è${input.address}üéñÔ∏è`\r\n    }\r\n\r\n    return (\r\n        <div className=\"Transaction\">\r\n            <div>From: {input.address}</div>\r\n            {\r\n                recipient.map(recipient => (\r\n                    <div>\r\n                        To : {recipient} | Sent : {output[recipient]}\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Transaction;",["50","51"],"C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\ConductTransactions.js",["52"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FormGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { API_BASE_URL } from '../config';\r\nimport history from '../history';\r\nimport fetchBalance from './App'\r\n\r\nfunction ConductTransaction() {\r\n  const [amount, setAmount] = useState(0);\r\n  const [recipient, setRecipient] = useState('');\r\n  const [knownAddresses, setKnownAddresses] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(`${API_BASE_URL}known-addresses`)\r\n      .then(response => response.json())\r\n      .then(json => setKnownAddresses(json));\r\n  }, []);\r\n\r\n  const updateRecipient = event => {\r\n    setRecipient(event.target.value);\r\n  }\r\n\r\n  const updateAmount = event => {\r\n    setAmount(Number(event.target.value));\r\n  }\r\n\r\n  const submitTransaction = () => {\r\n    fetch(`${API_BASE_URL}wallet/transact`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ recipient, amount })\r\n    }).then(response => response.json())\r\n      .then(json => {\r\n        console.log('submitTransaction json', json);\r\n\r\n        alert('Success!');\r\n\r\n        history.push('/transaction-pool');\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className=\"ConductTransaction\">\r\n      <Link to=\"/\" className=\"link\">Home</Link>\r\n      <hr />\r\n      <h3>Conduct a Transaction</h3>\r\n      <br />\r\n      <FormGroup>\r\n        <FormControl\r\n          input=\"text\"\r\n          placeholder=\"recipient\"\r\n          value={recipient}\r\n          onChange={updateRecipient}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <FormControl\r\n          input=\"number\"\r\n          placeholder=\"amount\"\r\n          value={amount}\r\n          onChange={updateAmount}\r\n        />\r\n      </FormGroup>\r\n      <div>\r\n        <Button\r\n          onClick={submitTransaction}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </div>\r\n      <br />\r\n      <h4>Known Addresses</h4>\r\n      <div>\r\n        {\r\n          knownAddresses.map((knownAddress, i) => (\r\n            <span key={knownAddress}>\r\n              <u>{knownAddress}</u>{i !== knownAddresses.length - 1 ? ', ' : ''}\r\n            </span>\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ConductTransaction;","C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\history.js",[],"C:\\Users\\Zarif\\Desktop\\project\\BlockChain_App\\Block-Chain-Web-App\\frontend\\src\\components\\transaction_pool.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":26,"nodeType":"59","messageId":"60","endLine":1,"endColumn":35},{"ruleId":"57","severity":1,"message":"61","line":40,"column":29,"nodeType":"59","messageId":"60","endLine":40,"endColumn":33},{"ruleId":"57","severity":1,"message":"58","line":1,"column":16,"nodeType":"59","messageId":"60","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"62","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":35},{"ruleId":"63","severity":1,"message":"64","line":7,"column":22,"nodeType":"65","messageId":"66","endLine":7,"endColumn":24},{"ruleId":"53","replacedBy":"67"},{"ruleId":"55","replacedBy":"68"},{"ruleId":"57","severity":1,"message":"69","line":6,"column":8,"nodeType":"59","messageId":"60","endLine":6,"endColumn":20},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["70"],["71"],"'fetchBalance' is defined but never used.","no-global-assign","no-unsafe-negation"]